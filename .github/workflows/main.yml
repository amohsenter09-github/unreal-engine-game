name: startMagent2DevEC2
# Controls when the action will run. 
# This code is set up only to run when you click action in the repository, If you require to run on a push or cron edit below
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
# The type of runner that the job will run on
    runs-on: ubuntu-latest
# Below this are each of the steps that are run
    steps:
# Name of step
      - name: Start AWS EC2
        # Run AWS Command on the GitHub Hosted runner which starts the instance using AWS authentication stored in GitHub Secrets (see below how to add)
        run: |
          aws ec2 start-instances --instance-ids ${{secrets.AWS_EC2_INSTANCE_ID }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}


  Deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2 
      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.HOST_NAME  }}
            USER_NAME : ${{ secrets.USER_NAME  }}
            TARGET: ${{ secrets.TARGET_DIR }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME}
          sudo apt-get update -y

  DeployONwindows:
   runs-on: ubuntu-latest
    
   steps:
      - uses: actions/checkout@v2 
      - name: Deploy in windows
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOST_NAME_WINDOWS : ${{ secrets.HOST_NAME_WINDOWS  }}
            USER_NAME_WINDOWS : ${{ secrets.USER_NAME_WINDOWS  }}
            USER_PASSWORD : ${{ secrets.USER_PASSWORD  }}
        shell: pwsh
        run: |
         
          sudo apt-get install sshpass -y 
          sudo apt-get update -y
          sshpass -p ${USER_PASSWORD} ssh -o StrictHostKeyChecking=no ${USER_NAME_WINDOWS}@${HOST_NAME_WINDOWS}
          whoami

         